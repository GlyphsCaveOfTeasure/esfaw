local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlaceId = game.PlaceId

local settingsFile = "brainrot_settings.json"
local settings = { Ping = true, ESP = true } -- ESP auto-on

-- Load/save settings
local function loadSettings()
    if isfile(settingsFile) then
        local success, result = pcall(HttpService.JSONDecode, HttpService, readfile(settingsFile))
        if success then settings = result end
    else
        writefile(settingsFile, HttpService:JSONEncode(settings))
    end
end

local function saveSettings()
    writefile(settingsFile, HttpService:JSONEncode(settings))
end

loadSettings()

-- GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame", ScreenGui)
frame.Size = UDim2.new(0, 403, 0, 415)
frame.Position = UDim2.new(0.429, 0, 0.276, 0)
frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
frame.Active = true
frame.Draggable = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)

local Logger = Instance.new("ScrollingFrame", frame)
Logger.Size = UDim2.new(0, 403, 0, 305)
Logger.Position = UDim2.new(0, 0, 0.135, 0)
Logger.BackgroundTransparency = 1
Logger.ScrollBarThickness = 9
Logger.AutomaticCanvasSize = Enum.AutomaticSize.Y
local listLayout = Instance.new("UIListLayout", Logger)
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Padding = UDim.new(0, 5)
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

local scanningLabel = Instance.new("TextLabel", frame)
scanningLabel.Size = UDim2.new(0, 403, 0, 50)
scanningLabel.Position = UDim2.new(0, 0, 0.87, 0)
scanningLabel.BackgroundTransparency = 1
scanningLabel.Font = Enum.Font.FredokaOne
scanningLabel.Text = ""
scanningLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
scanningLabel.TextSize = 14

local FoundAmount = Instance.new("TextLabel", frame)
FoundAmount.Size = UDim2.new(0, 403, 0, 50)
FoundAmount.Font = Enum.Font.FredokaOne
FoundAmount.TextColor3 = Color3.fromRGB(255, 255, 255)
FoundAmount.TextSize = 30
FoundAmount.BackgroundTransparency = 1
FoundAmount.Text = "Found: 0"

-- Settings GUI
local SettingsOpenButton = Instance.new("ImageButton", frame)
SettingsOpenButton.Size = UDim2.new(0, 50, 0, 50)
SettingsOpenButton.Position = UDim2.new(1.038, 0, 0, 0)
SettingsOpenButton.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
SettingsOpenButton.Image = "rbxassetid://100665044102453"
Instance.new("UICorner", SettingsOpenButton).CornerRadius = UDim.new(0, 10)

local SettingsGUI = Instance.new("Frame", frame)
SettingsGUI.Size = UDim2.new(0, 190, 0, 240)
SettingsGUI.Position = UDim2.new(12.0, 0, 0, 0)
SettingsGUI.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
Instance.new("UICorner", SettingsGUI).CornerRadius = UDim.new(0, 10)

local function createToggle(parent, labelText, defaultState, yPosition, settingName)
    local Label = Instance.new("TextLabel", parent)
    Label.Size = UDim2.new(0, 98, 0, 50)
    Label.Position = UDim2.new(0, 10, 0, yPosition)
    Label.Font = Enum.Font.FredokaOne
    Label.Text = labelText
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 28
    Label.BackgroundTransparency = 1

    local Toggle = Instance.new("Frame", parent)
    Toggle.Size = UDim2.new(0, 70, 0, 34)
    Toggle.Position = UDim2.new(0.55, 0, 0, yPosition + 6)
    Toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Instance.new("UICorner", Toggle).CornerRadius = UDim.new(0, 17)

    local Knob = Instance.new("Frame", Toggle)
    Knob.Size = UDim2.new(0, 26, 0, 26)
    Knob.Position = defaultState and UDim2.new(1, -30, 0, 4) or UDim2.new(0, 4, 0, 4)
    Knob.BackgroundColor3 = defaultState and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(35, 35, 35)
    Instance.new("UICorner", Knob).CornerRadius = UDim.new(1, 0)

    local function toggleAction()
        settings[settingName] = not settings[settingName]
        saveSettings()
        local on = settings[settingName]
        TweenService:Create(Knob, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Position = on and UDim2.new(1, -30, 0, 4) or UDim2.new(0, 4, 0, 4),
            BackgroundColor3 = on and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(35, 35, 35)
        }):Play()

        if settingName == "ESP" then
            if on then
                loadESP()
            else
                unloadESP()
            end
        end
    end

    Toggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then toggleAction() end
    end)
    Knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then toggleAction() end
    end)
end

createToggle(SettingsGUI, "Ping:", settings.Ping, 10, "Ping")
createToggle(SettingsGUI, "ESP:", settings.ESP, 80, "ESP")

-- Settings button
local settingsOpen = false
SettingsOpenButton.MouseButton1Click:Connect(function()
    settingsOpen = not settingsOpen
    if settingsOpen then
        TweenService:Create(SettingsGUI, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(1.03, 0, 0, 0)}):Play()
    else
        TweenService:Create(SettingsGUI, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(12.0, 0, 0, 0)}):Play()
    end
end)

-- ====================
-- PLAYER ESP
-- ====================
local CharacterESP = {}
local Camera = Workspace.CurrentCamera
local MAX_DISTANCE = 250

local function isAlive(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid.Health > 0
end

local function getHead(character) return character:FindFirstChild("Head") end
local function distanceFromCamera(cf) return (Camera.CFrame.Position - cf.Position).Magnitude end
local function sameTeam(p1, p2) return p1.Team and p2.Team and p1.Team == p2.Team end

local function makeHighlight(character, owner)
    local h = Instance.new("Highlight")
    h.Adornee = character
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.FillTransparency = 0.15
    h.OutlineTransparency = 0.05
    h.OutlineColor = Color3.fromRGB(255, 255, 255)
    h.FillColor = sameTeam(LocalPlayer, owner) and Color3.fromRGB(0, 255, 100) or Color3.fromRGB(0, 120, 255)
    h.Parent = character
    return h
end

local function makeNameBillboard(head, text)
    local bb = Instance.new("BillboardGui")
    bb.Size = UDim2.new(0, 200, 0, 50)
    bb.AlwaysOnTop = true
    bb.StudsOffset = Vector3.new(0, 2.5, 0)
    bb.MaxDistance = MAX_DISTANCE + 25
    bb.Adornee = head
    bb.Parent = head
    local tl = Instance.new("TextLabel")
    tl.Size = UDim2.fromScale(1, 1)
    tl.BackgroundTransparency = 1
    tl.Text = text
    tl.TextSize = 18
    tl.Font = Enum.Font.GothamBold
    tl.TextColor3 = Color3.fromRGB(255, 255, 255)
    tl.TextStrokeTransparency = 0
    tl.TextStrokeColor3 = Color3.new(0, 0, 0)
    tl.Parent = bb
    return bb
end

local function cleanupCharacterESP(character)
    local data = CharacterESP[character]
    if data then
        if data.conn then data.conn:Disconnect() end
        if data.highlight then data.highlight:Destroy() end
        if data.billboard then data.billboard:Destroy() end
        CharacterESP[character] = nil
    end
end

local function attachESP(character, owner)
    if not character or CharacterESP[character] then return end
    local head = getHead(character)
    if not head then return end
    local highlight = makeHighlight(character, owner)
    local billboard = makeNameBillboard(head, owner.DisplayName ~= "" and owner.DisplayName or owner.Name)
    local conn
    conn = RunService.RenderStepped:Connect(function()
        if not character.Parent or not isAlive(character) then
            highlight.Enabled = false
            billboard.Enabled = false
            return
        end
        local d = distanceFromCamera(head.CFrame)
        local within = d <= MAX_DISTANCE
        highlight.Enabled = within
        billboard.Enabled = within
        highlight.FillColor = sameTeam(LocalPlayer, owner) and Color3.fromRGB(0, 255, 100) or Color3.fromRGB(0, 120, 255)
    end)
    CharacterESP[character] = {highlight = highlight, billboard = billboard, conn = conn}
end

local function loadESP()
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            if p.Character then attachESP(p.Character, p) end
            p.CharacterAdded:Connect(function(char) attachESP(char, p) end)
        end
    end
    Players.PlayerRemoving:Connect(function(p)
        if p.Character then cleanupCharacterESP(p.Character) end
    end)
end

local function unloadESP()
    for char in pairs(CharacterESP) do
        cleanupCharacterESP(char)
    end
end

-- Auto-enable ESP
loadESP()

-- ====================
-- SCAN & SERVER HOP
-- ====================
local brainrotNames = _G.TargetBrainrots or {}
local foundObjects = {}
local triedServers = {}
local serversTried = 0

local function matchesBrainrot(name)
    for _, br in ipairs(brainrotNames) do
        if name == br then return br end
    end
    return nil
end

local function scanForBrainrots()
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("BasePart") and matchesBrainrot(obj.Name) and not foundObjects[obj] then
            foundObjects[obj] = true
            local label = Instance.new("TextLabel", Logger)
            label.Size = UDim2.new(0, 200, 0, 30)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Font = Enum.Font.FredokaOne
            label.TextSize = 18
            label.Text = "Found: " .. obj.Name
            FoundAmount.Text = "Found: " .. tostring(#foundObjects)
        end
    end
end

local function getServerList()
    local servers = {}
    local page = 0
    local morePages = true
    while morePages do
        local url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100&cursor=%s", PlaceId, page)
        local success, res = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)
        if success and res and res.data then
            for _, s in ipairs(res.data) do
                if s.id ~= game.JobId and not triedServers[s.id] then
                    table.insert(servers, s.id)
                end
            end
            if res.nextPageCursor then
                page = res.nextPageCursor
            else
                morePages = false
            end
        else
            morePages = false
        end
    end
    return servers
end

local function serverHop()
    local servers = getServerList()
    if #servers > 0 then
        local id = servers[math.random(1, #servers)]
        triedServers[id] = true
        serversTried += 1
        TeleportService:TeleportToPlaceInstance(PlaceId, id, LocalPlayer)
    end
end

-- Auto-scan loop
spawn(function()
    while true do
        scanningLabel.Text = "Scanning..."
        scanForBrainrots()
        wait(5)
        scanningLabel.Text = "Idle..."
    end
end)
